<div class="exercise-title">A List is a mutable sequence of first-class objects</div>
<div class="exercise-content">
    <p>As we learned in the previous exercise, once we construct a <strong>Tuple</strong> it will always contain exactly the same sequence of elements. There&#39;s no way to modify the Tuple (e.g., by replacing, adding or removing elements), and therefore a Tuple is an <em>immutable</em> data type in Python. Many programming applications require a <em>mutable</em> sequence type, and for this Python supplies a <strong>List</strong>. The syntax for <strong>List literals</strong> is very much like the <strong>Tuple literal</strong> syntax. Can you spot the difference?</p>

    <p><code>friends = [&#39;Peter&#39;, &#39;Paul&#39;, &#39;Mary&#39;]</code></p>

    <p>You index and slice a <strong>List</strong> in exactly the same way that we&#39;ve been indexing and slicing <strong>Tuples</strong>. For example, the following two lines send &quot;Peter&quot; and then &quot;2&quot; to the console:</p>

    <pre><code>
print friends[0]
print len(friends[1:])
    </code></pre>

    <p>It&#39;s also possible to replace a <strong>List</strong> element, using the same indexing syntax, but on the <em>left</em> side of an assignment statement. For example, the following code sends &quot;[&#39;Paul&#39;, &#39;Tiffany&#39;]&quot; to the console:</p>

    <pre><code>
friends[2] = &#39;Tiffany&#39;
print friends[1:]
    </code></pre>

    <p>We can also add elements to and remove elements from a <strong>List</strong>, using a number of convenient methods provided by <strong>List</strong> objects. We&#39;ll be using the following three in this exercise:</p>

    <p><strong>insert</strong>(i, new_item)<br>
<strong>remove</strong>(item)<br>
<strong>pop</strong>(i)</p>
</div>
<div class="exercise-instructions">
    <p>First, fix the capitalization of the second player name, but do so with a direct assignment to that element of the <strong>players</strong> list, using indexing on the <em>left</em> side of the assignment statement.</p>

    <p>Next, predict the values of six String variables, as directed.</p>

    <p>Next, rearrange the <strong>players</strong> List so that it matches the rearranged <strong>scores</strong> List, as directed.</p>

    <p>Finally, announce the <strong>second</strong> best player and score, as directed.</p>
</div>
<div class="exercise-hint">
    <p>When you format a <strong>List</strong> as a String, its string representation is used. This String representation looks the same as what you&#39;d use to construct the same List literal. For example, print [1, 2, 3] sends &quot;[1, 2, 3]&quot; to the console.</p>

    <p>Note that the <strong>remove</strong>(item) method&#39;s parameter is not a position, but rather an item to search for within the List. This is different from the <strong>pop</strong>(i) method, whose parameter <em>is</em> a position. It&#39;s difficult to see the difference in the examples with the <strong>scores</strong> List, because its elements are <strong>Integers</strong>. However, the difference will be obvious when you use these methods with the <strong>players</strong> List, because its elements are <strong>Strings</strong>.</p>

    <p>The <strong>insert</strong>(i, new_item) method has two parameters, one index and one item.</p>

    <p><strong>For Experts</strong>: It&#39;s possible to pass the result of the <strong>pop</strong>(i) method as the second parameter to the <strong>insert</strong>(i, new_item) method (i.e., without using a variable to hold it in between the two method calls). Thus, the rearrangement of <strong>players</strong> can be accomplished with only two lines of code. It&#39;s OK to do it with three lines, though, as we did with <strong>scores</strong>.</p>
</div>
